"""Initial schema setup

Revision ID: 7c0b05309982
Revises: 
Create Date: 2025-06-23 22:15:55.256118

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7c0b05309982'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('corporate_actions', 'event_date',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='除权除息日 (ex-date)。',
               existing_nullable=False)
    op.alter_column('corporate_actions', 'value',
               existing_type=sa.NUMERIC(precision=20, scale=10),
               comment=None,
               existing_comment='分红为每股金额；拆股(如2拆1)或送股(如10送10)存为2.0。',
               existing_nullable=False)
    op.drop_constraint(op.f('corporate_actions_security_id_event_date_event_type_key'), 'corporate_actions', type_='unique')
    op.drop_index(op.f('idx_corporate_actions_event_date'), table_name='corporate_actions')
    op.create_unique_constraint('_security_date_type_uc', 'corporate_actions', ['security_id', 'event_date', 'event_type'])
    op.create_index(op.f('ix_corporate_actions_event_date'), 'corporate_actions', ['event_date'], unique=False)
    op.drop_constraint(op.f('corporate_actions_security_id_fkey'), 'corporate_actions', type_='foreignkey')
    op.drop_table_comment(
        'corporate_actions',
        existing_comment='存储结构化的公司行动，如分红、拆股、送股。',
        schema=None
    )
    op.alter_column('daily_prices', 'adj_close_forward',
               existing_type=sa.NUMERIC(precision=19, scale=4),
               comment=None,
               existing_comment='前复权收盘价，在ETL阶段预先计算并存储。',
               existing_nullable=True)
    op.alter_column('daily_prices', 'adj_close_backward',
               existing_type=sa.NUMERIC(precision=19, scale=4),
               comment=None,
               existing_comment='后复权收盘价，在ETL阶段预先计算并存储。',
               existing_nullable=True)
    op.alter_column('daily_prices', 'turnover_rate',
               existing_type=sa.NUMERIC(precision=10, scale=6),
               comment=None,
               existing_comment='换手率，单位为百分比时需注意单位统一，通常存为小数(e.g., 1.5%存为0.015)。',
               existing_nullable=True)
    op.drop_index(op.f('idx_daily_prices_date'), table_name='daily_prices')
    op.create_index(op.f('ix_daily_prices_date'), 'daily_prices', ['date'], unique=False)
    op.drop_constraint(op.f('daily_prices_security_id_fkey'), 'daily_prices', type_='foreignkey')
    op.drop_table_comment(
        'daily_prices',
        existing_comment='存储所有证券的每日行情数据，包含原始价、复权价和关键指标。',
        schema=None
    )
    op.alter_column('historical_shares', 'change_date',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='此日期及之后采用此股本数。',
               existing_nullable=False)
    op.alter_column('historical_shares', 'float_shares',
               existing_type=sa.BIGINT(),
               comment=None,
               existing_comment='流通股本，用于计算换手率。如果无法获取，可只用总股本。',
               existing_nullable=True)
    op.drop_constraint(op.f('historical_shares_security_id_change_date_key'), 'historical_shares', type_='unique')
    op.drop_index(op.f('idx_historical_shares_change_date'), table_name='historical_shares')
    op.create_unique_constraint('_security_change_date_uc', 'historical_shares', ['security_id', 'change_date'])
    op.create_index(op.f('ix_historical_shares_change_date'), 'historical_shares', ['change_date'], unique=False)
    op.drop_constraint(op.f('historical_shares_security_id_fkey'), 'historical_shares', type_='foreignkey')
    op.drop_table_comment(
        'historical_shares',
        existing_comment='记录股本的历史变动，用于精确计算历史市值和换手率。',
        schema=None
    )
    op.alter_column('securities', 'symbol',
               existing_type=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='唯一的证券代码，建议包含市场后缀以确保唯一性, e.g., 600519.SS, AAPL',
               existing_nullable=False)
    op.alter_column('securities', 'market',
               existing_type=postgresql.ENUM('CNA', 'HK', 'US', 'CRYPTO', 'FOREX', 'INDEX', name='market_type'),
               comment=None,
               existing_comment='证券所属的主要交易市场，便于分类筛选。',
               existing_nullable=False)
    op.alter_column('securities', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='标记该证券是否仍在交易，用于逻辑删除。',
               existing_nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('securities', 'last_updated',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_securities_market_type'), table_name='securities')
    op.drop_index(op.f('idx_securities_symbol'), table_name='securities')
    op.drop_constraint(op.f('securities_symbol_key'), 'securities', type_='unique')
    op.create_index(op.f('ix_securities_symbol'), 'securities', ['symbol'], unique=True)
    op.drop_table_comment(
        'securities',
        existing_comment='所有证券的中央查找表，存储相对静态的元数据。',
        schema=None
    )
    op.drop_constraint(op.f('special_adjustments_security_id_event_date_key'), 'special_adjustments', type_='unique')
    op.create_unique_constraint('_security_date_uc', 'special_adjustments', ['security_id', 'event_date'])
    op.drop_constraint(op.f('special_adjustments_security_id_fkey'), 'special_adjustments', type_='foreignkey')
    op.drop_table_comment(
        'special_adjustments',
        existing_comment='存储手动验证的、用于处理复杂事件（如分拆）的复权因子。',
        schema=None
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table_comment(
        'special_adjustments',
        '存储手动验证的、用于处理复杂事件（如分拆）的复权因子。',
        existing_comment=None,
        schema=None
    )
    op.create_foreign_key(op.f('special_adjustments_security_id_fkey'), 'special_adjustments', 'securities', ['security_id'], ['id'], ondelete='RESTRICT')
    op.drop_constraint('_security_date_uc', 'special_adjustments', type_='unique')
    op.create_unique_constraint(op.f('special_adjustments_security_id_event_date_key'), 'special_adjustments', ['security_id', 'event_date'], postgresql_nulls_not_distinct=False)
    op.create_table_comment(
        'securities',
        '所有证券的中央查找表，存储相对静态的元数据。',
        existing_comment=None,
        schema=None
    )
    op.drop_index(op.f('ix_securities_symbol'), table_name='securities')
    op.create_unique_constraint(op.f('securities_symbol_key'), 'securities', ['symbol'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_securities_symbol'), 'securities', ['symbol'], unique=False)
    op.create_index(op.f('idx_securities_market_type'), 'securities', ['market', 'type'], unique=False)
    op.alter_column('securities', 'last_updated',
               existing_type=sa.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('securities', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='标记该证券是否仍在交易，用于逻辑删除。',
               existing_nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('securities', 'market',
               existing_type=postgresql.ENUM('CNA', 'HK', 'US', 'CRYPTO', 'FOREX', 'INDEX', name='market_type'),
               comment='证券所属的主要交易市场，便于分类筛选。',
               existing_nullable=False)
    op.alter_column('securities', 'symbol',
               existing_type=sa.VARCHAR(length=20),
               comment='唯一的证券代码，建议包含市场后缀以确保唯一性, e.g., 600519.SS, AAPL',
               existing_nullable=False)
    op.create_table_comment(
        'historical_shares',
        '记录股本的历史变动，用于精确计算历史市值和换手率。',
        existing_comment=None,
        schema=None
    )
    op.create_foreign_key(op.f('historical_shares_security_id_fkey'), 'historical_shares', 'securities', ['security_id'], ['id'], ondelete='RESTRICT')
    op.drop_index(op.f('ix_historical_shares_change_date'), table_name='historical_shares')
    op.drop_constraint('_security_change_date_uc', 'historical_shares', type_='unique')
    op.create_index(op.f('idx_historical_shares_change_date'), 'historical_shares', ['change_date'], unique=False)
    op.create_unique_constraint(op.f('historical_shares_security_id_change_date_key'), 'historical_shares', ['security_id', 'change_date'], postgresql_nulls_not_distinct=False)
    op.alter_column('historical_shares', 'float_shares',
               existing_type=sa.BIGINT(),
               comment='流通股本，用于计算换手率。如果无法获取，可只用总股本。',
               existing_nullable=True)
    op.alter_column('historical_shares', 'change_date',
               existing_type=sa.DATE(),
               comment='此日期及之后采用此股本数。',
               existing_nullable=False)
    op.create_table_comment(
        'daily_prices',
        '存储所有证券的每日行情数据，包含原始价、复权价和关键指标。',
        existing_comment=None,
        schema=None
    )
    op.create_foreign_key(op.f('daily_prices_security_id_fkey'), 'daily_prices', 'securities', ['security_id'], ['id'], ondelete='RESTRICT')
    op.drop_index(op.f('ix_daily_prices_date'), table_name='daily_prices')
    op.create_index(op.f('idx_daily_prices_date'), 'daily_prices', ['date'], unique=False)
    op.alter_column('daily_prices', 'turnover_rate',
               existing_type=sa.NUMERIC(precision=10, scale=6),
               comment='换手率，单位为百分比时需注意单位统一，通常存为小数(e.g., 1.5%存为0.015)。',
               existing_nullable=True)
    op.alter_column('daily_prices', 'adj_close_backward',
               existing_type=sa.NUMERIC(precision=19, scale=4),
               comment='后复权收盘价，在ETL阶段预先计算并存储。',
               existing_nullable=True)
    op.alter_column('daily_prices', 'adj_close_forward',
               existing_type=sa.NUMERIC(precision=19, scale=4),
               comment='前复权收盘价，在ETL阶段预先计算并存储。',
               existing_nullable=True)
    op.create_table_comment(
        'corporate_actions',
        '存储结构化的公司行动，如分红、拆股、送股。',
        existing_comment=None,
        schema=None
    )
    op.create_foreign_key(op.f('corporate_actions_security_id_fkey'), 'corporate_actions', 'securities', ['security_id'], ['id'], ondelete='RESTRICT')
    op.drop_index(op.f('ix_corporate_actions_event_date'), table_name='corporate_actions')
    op.drop_constraint('_security_date_type_uc', 'corporate_actions', type_='unique')
    op.create_index(op.f('idx_corporate_actions_event_date'), 'corporate_actions', ['event_date'], unique=False)
    op.create_unique_constraint(op.f('corporate_actions_security_id_event_date_event_type_key'), 'corporate_actions', ['security_id', 'event_date', 'event_type'], postgresql_nulls_not_distinct=False)
    op.alter_column('corporate_actions', 'value',
               existing_type=sa.NUMERIC(precision=20, scale=10),
               comment='分红为每股金额；拆股(如2拆1)或送股(如10送10)存为2.0。',
               existing_nullable=False)
    op.alter_column('corporate_actions', 'event_date',
               existing_type=sa.DATE(),
               comment='除权除息日 (ex-date)。',
               existing_nullable=False)
    # ### end Alembic commands ###
